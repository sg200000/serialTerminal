
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a8c  08002a8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000164  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085c7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001575  00000000  00000000  00028667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  00029be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000618  00000000  00000000  0002a280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a3a  00000000  00000000  0002a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000857d  00000000  00000000  0004d2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c0e  00000000  00000000  0005584f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012645d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c48  00000000  00000000  001264b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800294c 	.word	0x0800294c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	0800294c 	.word	0x0800294c

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <__NVIC_SystemReset+0x24>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000526:	4904      	ldr	r1, [pc, #16]	; (8000538 <__NVIC_SystemReset+0x24>)
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <__NVIC_SystemReset+0x28>)
 800052a:	4313      	orrs	r3, r2
 800052c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800052e:	f3bf 8f4f 	dsb	sy
}
 8000532:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <__NVIC_SystemReset+0x20>
 8000538:	e000ed00 	.word	0xe000ed00
 800053c:	05fa0004 	.word	0x05fa0004

08000540 <initializeTerminal>:
/*
 * @brief	Terminal initialization Function
 * @param	None
 * @retval	None
 */
void initializeTerminal(){
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
	for (uint8_t k=0;k<NUM_LASTUSED;k++)
 8000546:	2300      	movs	r3, #0
 8000548:	71fb      	strb	r3, [r7, #7]
 800054a:	e00c      	b.n	8000566 <initializeTerminal+0x26>
		lastUsedCommands[k].command = (char *)calloc(30, sizeof(char));
 800054c:	79fc      	ldrb	r4, [r7, #7]
 800054e:	2101      	movs	r1, #1
 8000550:	201e      	movs	r0, #30
 8000552:	f002 f89d 	bl	8002690 <calloc>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <initializeTerminal+0x40>)
 800055c:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
	for (uint8_t k=0;k<NUM_LASTUSED;k++)
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	3301      	adds	r3, #1
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b09      	cmp	r3, #9
 800056a:	d9ef      	bls.n	800054c <initializeTerminal+0xc>
	lastUsedPointer = NUM_LASTUSED-1;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <initializeTerminal+0x44>)
 800056e:	2209      	movs	r2, #9
 8000570:	701a      	strb	r2, [r3, #0]
	handleStdout("\rSerial communication is established\r\n");
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <initializeTerminal+0x48>)
 8000574:	f000 f9ea 	bl	800094c <handleStdout>
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bd90      	pop	{r4, r7, pc}
 8000580:	200000c0 	.word	0x200000c0
 8000584:	2000008c 	.word	0x2000008c
 8000588:	08002964 	.word	0x08002964

0800058c <initializeCommands>:
/*
 * @brief	Commands initialization Function
 * @param	None
 * @retval	None
 */
void initializeCommands(){
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	commands[0].command = "device";
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <initializeCommands+0x58>)
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <initializeCommands+0x5c>)
 8000594:	601a      	str	r2, [r3, #0]
	commands[0].callback = &getDevInfos;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <initializeCommands+0x58>)
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <initializeCommands+0x60>)
 800059a:	605a      	str	r2, [r3, #4]
	commands[1].command = "turn on led green";
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <initializeCommands+0x58>)
 800059e:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <initializeCommands+0x64>)
 80005a0:	609a      	str	r2, [r3, #8]
	commands[1].callback = &toggleLed;
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <initializeCommands+0x58>)
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <initializeCommands+0x68>)
 80005a6:	60da      	str	r2, [r3, #12]
	commands[2].command = "turn off led green";
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <initializeCommands+0x58>)
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <initializeCommands+0x6c>)
 80005ac:	611a      	str	r2, [r3, #16]
	commands[2].callback = &toggleLed;
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <initializeCommands+0x58>)
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <initializeCommands+0x68>)
 80005b2:	615a      	str	r2, [r3, #20]
	commands[3].command = "turn on led red";
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <initializeCommands+0x58>)
 80005b6:	4a11      	ldr	r2, [pc, #68]	; (80005fc <initializeCommands+0x70>)
 80005b8:	619a      	str	r2, [r3, #24]
	commands[3].callback = &toggleLed;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <initializeCommands+0x58>)
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <initializeCommands+0x68>)
 80005be:	61da      	str	r2, [r3, #28]
	commands[4].command = "turn off led red";
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <initializeCommands+0x58>)
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <initializeCommands+0x74>)
 80005c4:	621a      	str	r2, [r3, #32]
	commands[4].callback = &toggleLed;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <initializeCommands+0x58>)
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <initializeCommands+0x68>)
 80005ca:	625a      	str	r2, [r3, #36]	; 0x24
	commands[5].command = "reboot";
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <initializeCommands+0x58>)
 80005ce:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <initializeCommands+0x78>)
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
	commands[5].callback = &resetDevice;
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <initializeCommands+0x58>)
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <initializeCommands+0x7c>)
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000090 	.word	0x20000090
 80005e8:	0800298c 	.word	0x0800298c
 80005ec:	08000989 	.word	0x08000989
 80005f0:	08002994 	.word	0x08002994
 80005f4:	080009a5 	.word	0x080009a5
 80005f8:	080029a8 	.word	0x080029a8
 80005fc:	080029bc 	.word	0x080029bc
 8000600:	080029cc 	.word	0x080029cc
 8000604:	080029e0 	.word	0x080029e0
 8000608:	08000a25 	.word	0x08000a25

0800060c <receiveSerialCommand>:
/*
 * @brief	Receiving and interacting with serial data received
 * @param	None
 * @retval	None
 */
void receiveSerialCommand(){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	int i = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
	bool waitForArrow = false;
 8000616:	2300      	movs	r3, #0
 8000618:	70fb      	strb	r3, [r7, #3]
	while (1){
		while(HAL_UART_Receive(&huart1, received+i, 1, 10));
 800061a:	bf00      	nop
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a7d      	ldr	r2, [pc, #500]	; (8000814 <receiveSerialCommand+0x208>)
 8000620:	1899      	adds	r1, r3, r2
 8000622:	230a      	movs	r3, #10
 8000624:	2201      	movs	r2, #1
 8000626:	487c      	ldr	r0, [pc, #496]	; (8000818 <receiveSerialCommand+0x20c>)
 8000628:	f001 fcad 	bl	8001f86 <HAL_UART_Receive>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f4      	bne.n	800061c <receiveSerialCommand+0x10>
		if (received[i]=='\r'){
 8000632:	4a78      	ldr	r2, [pc, #480]	; (8000814 <receiveSerialCommand+0x208>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b0d      	cmp	r3, #13
 800063c:	d12c      	bne.n	8000698 <receiveSerialCommand+0x8c>
			for (uint8_t j=i;j<100;j++)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	70bb      	strb	r3, [r7, #2]
 8000642:	e006      	b.n	8000652 <receiveSerialCommand+0x46>
				received[j] = '\0';
 8000644:	78bb      	ldrb	r3, [r7, #2]
 8000646:	4a73      	ldr	r2, [pc, #460]	; (8000814 <receiveSerialCommand+0x208>)
 8000648:	2100      	movs	r1, #0
 800064a:	54d1      	strb	r1, [r2, r3]
			for (uint8_t j=i;j<100;j++)
 800064c:	78bb      	ldrb	r3, [r7, #2]
 800064e:	3301      	adds	r3, #1
 8000650:	70bb      	strb	r3, [r7, #2]
 8000652:	78bb      	ldrb	r3, [r7, #2]
 8000654:	2b63      	cmp	r3, #99	; 0x63
 8000656:	d9f5      	bls.n	8000644 <receiveSerialCommand+0x38>
			for (uint8_t k=0;k<9;k++)
 8000658:	2300      	movs	r3, #0
 800065a:	707b      	strb	r3, [r7, #1]
 800065c:	e00f      	b.n	800067e <receiveSerialCommand+0x72>
				strcpy(lastUsedCommands[k].command,(char *)lastUsedCommands[k+1].command);
 800065e:	787b      	ldrb	r3, [r7, #1]
 8000660:	4a6e      	ldr	r2, [pc, #440]	; (800081c <receiveSerialCommand+0x210>)
 8000662:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000666:	787b      	ldrb	r3, [r7, #1]
 8000668:	3301      	adds	r3, #1
 800066a:	496c      	ldr	r1, [pc, #432]	; (800081c <receiveSerialCommand+0x210>)
 800066c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f002 f954 	bl	8002920 <strcpy>
			for (uint8_t k=0;k<9;k++)
 8000678:	787b      	ldrb	r3, [r7, #1]
 800067a:	3301      	adds	r3, #1
 800067c:	707b      	strb	r3, [r7, #1]
 800067e:	787b      	ldrb	r3, [r7, #1]
 8000680:	2b08      	cmp	r3, #8
 8000682:	d9ec      	bls.n	800065e <receiveSerialCommand+0x52>
			strcpy(lastUsedCommands[9].command,(const char *)received);
 8000684:	4b65      	ldr	r3, [pc, #404]	; (800081c <receiveSerialCommand+0x210>)
 8000686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000688:	4962      	ldr	r1, [pc, #392]	; (8000814 <receiveSerialCommand+0x208>)
 800068a:	4618      	mov	r0, r3
 800068c:	f002 f948 	bl	8002920 <strcpy>
			lastUsedPointer = NUM_LASTUSED-1;
 8000690:	4b63      	ldr	r3, [pc, #396]	; (8000820 <receiveSerialCommand+0x214>)
 8000692:	2209      	movs	r2, #9
 8000694:	701a      	strb	r2, [r3, #0]
			break;
 8000696:	e0b9      	b.n	800080c <receiveSerialCommand+0x200>
		}
		else if (received[i]==BACKSPACE){
 8000698:	4a5e      	ldr	r2, [pc, #376]	; (8000814 <receiveSerialCommand+0x208>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b7f      	cmp	r3, #127	; 0x7f
 80006a2:	d11b      	bne.n	80006dc <receiveSerialCommand+0xd0>
			if (i>0){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	dd15      	ble.n	80006d6 <receiveSerialCommand+0xca>
				HAL_UART_Transmit(&huart1, (uint8_t *)received+i, 1, 100);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a59      	ldr	r2, [pc, #356]	; (8000814 <receiveSerialCommand+0x208>)
 80006ae:	1899      	adds	r1, r3, r2
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	4858      	ldr	r0, [pc, #352]	; (8000818 <receiveSerialCommand+0x20c>)
 80006b6:	f001 fbd4 	bl	8001e62 <HAL_UART_Transmit>
				received[i] = '\0';
 80006ba:	4a56      	ldr	r2, [pc, #344]	; (8000814 <receiveSerialCommand+0x208>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
				received[i-1] = '\0';
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a52      	ldr	r2, [pc, #328]	; (8000814 <receiveSerialCommand+0x208>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	54d1      	strb	r1, [r2, r3]
				i--;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	e7a1      	b.n	800061a <receiveSerialCommand+0xe>
			}
			else {
				i = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e79e      	b.n	800061a <receiveSerialCommand+0xe>
			}

		}
		else if (received[i]==ARROW_CHAR0){
 80006dc:	4a4d      	ldr	r2, [pc, #308]	; (8000814 <receiveSerialCommand+0x208>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b1b      	cmp	r3, #27
 80006e6:	d102      	bne.n	80006ee <receiveSerialCommand+0xe2>
			waitForArrow = true;
 80006e8:	2301      	movs	r3, #1
 80006ea:	70fb      	strb	r3, [r7, #3]
 80006ec:	e795      	b.n	800061a <receiveSerialCommand+0xe>
		}
		else if (received[i]==ARROW_CHAR1){
 80006ee:	4a49      	ldr	r2, [pc, #292]	; (8000814 <receiveSerialCommand+0x208>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b5b      	cmp	r3, #91	; 0x5b
 80006f8:	d10e      	bne.n	8000718 <receiveSerialCommand+0x10c>
			if (!waitForArrow)
 80006fa:	78fb      	ldrb	r3, [r7, #3]
 80006fc:	f083 0301 	eor.w	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d089      	beq.n	800061a <receiveSerialCommand+0xe>
				HAL_UART_Transmit(&huart1, (uint8_t *)received+i, 1, 100);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a42      	ldr	r2, [pc, #264]	; (8000814 <receiveSerialCommand+0x208>)
 800070a:	1899      	adds	r1, r3, r2
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	2201      	movs	r2, #1
 8000710:	4841      	ldr	r0, [pc, #260]	; (8000818 <receiveSerialCommand+0x20c>)
 8000712:	f001 fba6 	bl	8001e62 <HAL_UART_Transmit>
 8000716:	e780      	b.n	800061a <receiveSerialCommand+0xe>
		}
		else if (received[i]==ARROW_UP){
 8000718:	4a3e      	ldr	r2, [pc, #248]	; (8000814 <receiveSerialCommand+0x208>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b41      	cmp	r3, #65	; 0x41
 8000722:	d159      	bne.n	80007d8 <receiveSerialCommand+0x1cc>
			if (waitForArrow){
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d04d      	beq.n	80007c6 <receiveSerialCommand+0x1ba>
				waitForArrow = false;
 800072a:	2300      	movs	r3, #0
 800072c:	70fb      	strb	r3, [r7, #3]
				memset(received, '\177', 100);
 800072e:	2264      	movs	r2, #100	; 0x64
 8000730:	217f      	movs	r1, #127	; 0x7f
 8000732:	4838      	ldr	r0, [pc, #224]	; (8000814 <receiveSerialCommand+0x208>)
 8000734:	f001 ffe6 	bl	8002704 <memset>
				HAL_UART_Transmit(&huart1, received, i+1, 100);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	b29b      	uxth	r3, r3
 800073c:	3301      	adds	r3, #1
 800073e:	b29a      	uxth	r2, r3
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	4934      	ldr	r1, [pc, #208]	; (8000814 <receiveSerialCommand+0x208>)
 8000744:	4834      	ldr	r0, [pc, #208]	; (8000818 <receiveSerialCommand+0x20c>)
 8000746:	f001 fb8c 	bl	8001e62 <HAL_UART_Transmit>
				for (uint8_t j=i;j<100;j++)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	703b      	strb	r3, [r7, #0]
 800074e:	e006      	b.n	800075e <receiveSerialCommand+0x152>
					received[j] = '\0';
 8000750:	783b      	ldrb	r3, [r7, #0]
 8000752:	4a30      	ldr	r2, [pc, #192]	; (8000814 <receiveSerialCommand+0x208>)
 8000754:	2100      	movs	r1, #0
 8000756:	54d1      	strb	r1, [r2, r3]
				for (uint8_t j=i;j<100;j++)
 8000758:	783b      	ldrb	r3, [r7, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	703b      	strb	r3, [r7, #0]
 800075e:	783b      	ldrb	r3, [r7, #0]
 8000760:	2b63      	cmp	r3, #99	; 0x63
 8000762:	d9f5      	bls.n	8000750 <receiveSerialCommand+0x144>
				HAL_UART_Transmit(&huart1, received, i+1, 100);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	b29b      	uxth	r3, r3
 8000768:	3301      	adds	r3, #1
 800076a:	b29a      	uxth	r2, r3
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	4929      	ldr	r1, [pc, #164]	; (8000814 <receiveSerialCommand+0x208>)
 8000770:	4829      	ldr	r0, [pc, #164]	; (8000818 <receiveSerialCommand+0x20c>)
 8000772:	f001 fb76 	bl	8001e62 <HAL_UART_Transmit>
				handleStdout("\r");
 8000776:	482b      	ldr	r0, [pc, #172]	; (8000824 <receiveSerialCommand+0x218>)
 8000778:	f000 f8e8 	bl	800094c <handleStdout>
				strcpy((char *)received, lastUsedCommands[lastUsedPointer].command);
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <receiveSerialCommand+0x214>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <receiveSerialCommand+0x210>)
 8000784:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000788:	4619      	mov	r1, r3
 800078a:	4822      	ldr	r0, [pc, #136]	; (8000814 <receiveSerialCommand+0x208>)
 800078c:	f002 f8c8 	bl	8002920 <strcpy>
				HAL_UART_Transmit(&huart1, received, 100, 100);
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	2264      	movs	r2, #100	; 0x64
 8000794:	491f      	ldr	r1, [pc, #124]	; (8000814 <receiveSerialCommand+0x208>)
 8000796:	4820      	ldr	r0, [pc, #128]	; (8000818 <receiveSerialCommand+0x20c>)
 8000798:	f001 fb63 	bl	8001e62 <HAL_UART_Transmit>
				if (lastUsedPointer>0)
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <receiveSerialCommand+0x214>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d006      	beq.n	80007b2 <receiveSerialCommand+0x1a6>
					lastUsedPointer--;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <receiveSerialCommand+0x214>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <receiveSerialCommand+0x214>)
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e002      	b.n	80007b8 <receiveSerialCommand+0x1ac>
				else
					lastUsedPointer = NUM_LASTUSED-1;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <receiveSerialCommand+0x214>)
 80007b4:	2209      	movs	r2, #9
 80007b6:	701a      	strb	r2, [r3, #0]
				i = strlen(received-1);
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <receiveSerialCommand+0x21c>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fd20 	bl	8000200 <strlen>
 80007c0:	4603      	mov	r3, r0
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	e729      	b.n	800061a <receiveSerialCommand+0xe>
			}
			else
				HAL_UART_Transmit(&huart1, (uint8_t *)received+i, 1, 100);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <receiveSerialCommand+0x208>)
 80007ca:	1899      	adds	r1, r3, r2
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2201      	movs	r2, #1
 80007d0:	4811      	ldr	r0, [pc, #68]	; (8000818 <receiveSerialCommand+0x20c>)
 80007d2:	f001 fb46 	bl	8001e62 <HAL_UART_Transmit>
 80007d6:	e720      	b.n	800061a <receiveSerialCommand+0xe>
		}
		else if (received[i]>31 && received[i]<127){
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <receiveSerialCommand+0x208>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b1f      	cmp	r3, #31
 80007e2:	f67f af1a 	bls.w	800061a <receiveSerialCommand+0xe>
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <receiveSerialCommand+0x208>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b7e      	cmp	r3, #126	; 0x7e
 80007f0:	f63f af13 	bhi.w	800061a <receiveSerialCommand+0xe>
			HAL_UART_Transmit(&huart1, (uint8_t *)received+i, 1, 100);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a07      	ldr	r2, [pc, #28]	; (8000814 <receiveSerialCommand+0x208>)
 80007f8:	1899      	adds	r1, r3, r2
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	2201      	movs	r2, #1
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <receiveSerialCommand+0x20c>)
 8000800:	f001 fb2f 	bl	8001e62 <HAL_UART_Transmit>
			i++;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3301      	adds	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
		while(HAL_UART_Receive(&huart1, received+i, 1, 10));
 800080a:	e706      	b.n	800061a <receiveSerialCommand+0xe>
		}
	}
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000114 	.word	0x20000114
 8000818:	20000178 	.word	0x20000178
 800081c:	200000c0 	.word	0x200000c0
 8000820:	2000008c 	.word	0x2000008c
 8000824:	080029e8 	.word	0x080029e8
 8000828:	20000113 	.word	0x20000113

0800082c <handleSerialCommand>:
/*
 * @brief	Handle serial command and send the response
 * @param	None
 * @retval	None
 */
void handleSerialCommand(){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	sendCommandResponse((char *)received);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <handleSerialCommand+0x10>)
 8000832:	f000 f805 	bl	8000840 <sendCommandResponse>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000114 	.word	0x20000114

08000840 <sendCommandResponse>:

void sendCommandResponse(char * command){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	void * params;
	if (!strcmp(command, commands[0].command))
 8000848:	4b3d      	ldr	r3, [pc, #244]	; (8000940 <sendCommandResponse+0x100>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fccc 	bl	80001ec <strcmp>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d104      	bne.n	8000864 <sendCommandResponse+0x24>
		(*commands[0].callback)(NULL);
 800085a:	4b39      	ldr	r3, [pc, #228]	; (8000940 <sendCommandResponse+0x100>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2000      	movs	r0, #0
 8000860:	4798      	blx	r3
	else if (!strcmp(command, commands[5].command)){
		(*commands[5].callback)(NULL);
	}
	else
		handleStdout("\r\nOK\r\n");
}
 8000862:	e068      	b.n	8000936 <sendCommandResponse+0xf6>
	else if (!strcmp(command, commands[1].command)){
 8000864:	4b36      	ldr	r3, [pc, #216]	; (8000940 <sendCommandResponse+0x100>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	4619      	mov	r1, r3
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fcbe 	bl	80001ec <strcmp>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10c      	bne.n	8000890 <sendCommandResponse+0x50>
		led.color = GREEN;
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <sendCommandResponse+0x104>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
		led.state = ON;
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <sendCommandResponse+0x104>)
 800087e:	2201      	movs	r2, #1
 8000880:	705a      	strb	r2, [r3, #1]
		params = &led;
 8000882:	4b30      	ldr	r3, [pc, #192]	; (8000944 <sendCommandResponse+0x104>)
 8000884:	60fb      	str	r3, [r7, #12]
		(*commands[1].callback)(params);
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <sendCommandResponse+0x100>)
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	4798      	blx	r3
}
 800088e:	e052      	b.n	8000936 <sendCommandResponse+0xf6>
	else if (!strcmp(command, commands[2].command)){
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <sendCommandResponse+0x100>)
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	4619      	mov	r1, r3
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fca8 	bl	80001ec <strcmp>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d10c      	bne.n	80008bc <sendCommandResponse+0x7c>
		led.color = GREEN;
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <sendCommandResponse+0x104>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
		led.state = OFF;
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <sendCommandResponse+0x104>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	705a      	strb	r2, [r3, #1]
		params = &led;
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <sendCommandResponse+0x104>)
 80008b0:	60fb      	str	r3, [r7, #12]
		(*commands[2].callback)(params);
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <sendCommandResponse+0x100>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	4798      	blx	r3
}
 80008ba:	e03c      	b.n	8000936 <sendCommandResponse+0xf6>
	else if (!strcmp(command, commands[3].command)){
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <sendCommandResponse+0x100>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4619      	mov	r1, r3
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fc92 	bl	80001ec <strcmp>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10c      	bne.n	80008e8 <sendCommandResponse+0xa8>
		led.color = RED;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <sendCommandResponse+0x104>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
		led.state = ON;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <sendCommandResponse+0x104>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	705a      	strb	r2, [r3, #1]
		params = &led;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <sendCommandResponse+0x104>)
 80008dc:	60fb      	str	r3, [r7, #12]
		(*commands[3].callback)(params);
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <sendCommandResponse+0x100>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	4798      	blx	r3
}
 80008e6:	e026      	b.n	8000936 <sendCommandResponse+0xf6>
	else if (!strcmp(command, commands[4].command)){
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <sendCommandResponse+0x100>)
 80008ea:	6a1b      	ldr	r3, [r3, #32]
 80008ec:	4619      	mov	r1, r3
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fc7c 	bl	80001ec <strcmp>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10c      	bne.n	8000914 <sendCommandResponse+0xd4>
		led.color = RED;
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <sendCommandResponse+0x104>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
		led.state = OFF;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <sendCommandResponse+0x104>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
		params = &led;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <sendCommandResponse+0x104>)
 8000908:	60fb      	str	r3, [r7, #12]
		(*commands[4].callback)(params);
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <sendCommandResponse+0x100>)
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	4798      	blx	r3
}
 8000912:	e010      	b.n	8000936 <sendCommandResponse+0xf6>
	else if (!strcmp(command, commands[5].command)){
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <sendCommandResponse+0x100>)
 8000916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000918:	4619      	mov	r1, r3
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fc66 	bl	80001ec <strcmp>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d104      	bne.n	8000930 <sendCommandResponse+0xf0>
		(*commands[5].callback)(NULL);
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <sendCommandResponse+0x100>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	2000      	movs	r0, #0
 800092c:	4798      	blx	r3
}
 800092e:	e002      	b.n	8000936 <sendCommandResponse+0xf6>
		handleStdout("\r\nOK\r\n");
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <sendCommandResponse+0x108>)
 8000932:	f000 f80b 	bl	800094c <handleStdout>
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000090 	.word	0x20000090
 8000944:	20000110 	.word	0x20000110
 8000948:	080029ec 	.word	0x080029ec

0800094c <handleStdout>:
/*
 * @brief	Send text in serial
 * @param	out_text : the text to be sent
 * @retval	None
 */
void handleStdout(char * outText){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	size_t outSize = strlen(outText);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff fc53 	bl	8000200 <strlen>
 800095a:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *)outText, (uint8_t)outSize, 100);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	b29a      	uxth	r2, r3
 8000962:	2364      	movs	r3, #100	; 0x64
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <handleStdout+0x34>)
 8000968:	f001 fa7b 	bl	8001e62 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)"$ ", 2, 100);
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	2202      	movs	r2, #2
 8000970:	4904      	ldr	r1, [pc, #16]	; (8000984 <handleStdout+0x38>)
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <handleStdout+0x34>)
 8000974:	f001 fa75 	bl	8001e62 <HAL_UART_Transmit>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000178 	.word	0x20000178
 8000984:	080029f4 	.word	0x080029f4

08000988 <getDevInfos>:

/* Here you define your command functions*/

void getDevInfos(void * ptr){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	handleStdout("\r\nstm32\r\n");
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <getDevInfos+0x18>)
 8000992:	f7ff ffdb 	bl	800094c <handleStdout>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	080029f8 	.word	0x080029f8

080009a4 <toggleLed>:

void toggleLed(void * ledConf){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	LEDTypeDef ledtemp = *(LEDTypeDef *)ledConf;
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	8812      	ldrh	r2, [r2, #0]
 80009b4:	801a      	strh	r2, [r3, #0]
	if (ledtemp.color == GREEN){
 80009b6:	7b3b      	ldrb	r3, [r7, #12]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d111      	bne.n	80009e0 <toggleLed+0x3c>
		HAL_GPIO_WritePin(GPIOG,  GPIO_PIN_13, ledtemp.state);
 80009bc:	7b7b      	ldrb	r3, [r7, #13]
 80009be:	461a      	mov	r2, r3
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <toggleLed+0x6c>)
 80009c6:	f000 fd4d 	bl	8001464 <HAL_GPIO_WritePin>
		if (ledtemp.state == ON)
 80009ca:	7b7b      	ldrb	r3, [r7, #13]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d103      	bne.n	80009d8 <toggleLed+0x34>
			handleStdout("\r\nLED Green is on\r\n");
 80009d0:	4810      	ldr	r0, [pc, #64]	; (8000a14 <toggleLed+0x70>)
 80009d2:	f7ff ffbb 	bl	800094c <handleStdout>
		if (ledtemp.state == ON)
			handleStdout("\r\nLED Red is on\r\n");
		else
			handleStdout("\r\nLED Red is off\r\n");
	}
}
 80009d6:	e017      	b.n	8000a08 <toggleLed+0x64>
			handleStdout("\r\nLED Green is off\r\n");
 80009d8:	480f      	ldr	r0, [pc, #60]	; (8000a18 <toggleLed+0x74>)
 80009da:	f7ff ffb7 	bl	800094c <handleStdout>
}
 80009de:	e013      	b.n	8000a08 <toggleLed+0x64>
	else if (ledtemp.color == RED){
 80009e0:	7b3b      	ldrb	r3, [r7, #12]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d110      	bne.n	8000a08 <toggleLed+0x64>
		HAL_GPIO_WritePin(GPIOG,  GPIO_PIN_14, ledtemp.state);
 80009e6:	7b7b      	ldrb	r3, [r7, #13]
 80009e8:	461a      	mov	r2, r3
 80009ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ee:	4808      	ldr	r0, [pc, #32]	; (8000a10 <toggleLed+0x6c>)
 80009f0:	f000 fd38 	bl	8001464 <HAL_GPIO_WritePin>
		if (ledtemp.state == ON)
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d103      	bne.n	8000a02 <toggleLed+0x5e>
			handleStdout("\r\nLED Red is on\r\n");
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <toggleLed+0x78>)
 80009fc:	f7ff ffa6 	bl	800094c <handleStdout>
}
 8000a00:	e002      	b.n	8000a08 <toggleLed+0x64>
			handleStdout("\r\nLED Red is off\r\n");
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <toggleLed+0x7c>)
 8000a04:	f7ff ffa2 	bl	800094c <handleStdout>
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021800 	.word	0x40021800
 8000a14:	08002a04 	.word	0x08002a04
 8000a18:	08002a18 	.word	0x08002a18
 8000a1c:	08002a30 	.word	0x08002a30
 8000a20:	08002a44 	.word	0x08002a44

08000a24 <resetDevice>:

void resetDevice(void * ptr){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	for (uint8_t k=0;k<NUM_LASTUSED;k++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	e009      	b.n	8000a46 <resetDevice+0x22>
		free(lastUsedCommands[k].command);
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <resetDevice+0x34>)
 8000a36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fe5a 	bl	80026f4 <free>
	for (uint8_t k=0;k<NUM_LASTUSED;k++)
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	3301      	adds	r3, #1
 8000a44:	73fb      	strb	r3, [r7, #15]
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	d9f2      	bls.n	8000a32 <resetDevice+0xe>
	handleStdout("\r\nRebooting...\r\n");
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <resetDevice+0x38>)
 8000a4e:	f7ff ff7d 	bl	800094c <handleStdout>
	NVIC_SystemReset();
 8000a52:	f7ff fd5f 	bl	8000514 <__NVIC_SystemReset>
 8000a56:	bf00      	nop
 8000a58:	200000c0 	.word	0x200000c0
 8000a5c:	08002a58 	.word	0x08002a58

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 f9fa 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f80e 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 f8a0 	bl	8000bb0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a70:	f000 f874 	bl	8000b5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initializeTerminal();
 8000a74:	f7ff fd64 	bl	8000540 <initializeTerminal>
  initializeCommands();
 8000a78:	f7ff fd88 	bl	800058c <initializeCommands>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  receiveSerialCommand();
 8000a7c:	f7ff fdc6 	bl	800060c <receiveSerialCommand>
	  handleSerialCommand();
 8000a80:	f7ff fed4 	bl	800082c <handleSerialCommand>
	  receiveSerialCommand();
 8000a84:	e7fa      	b.n	8000a7c <main+0x1c>
	...

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b094      	sub	sp, #80	; 0x50
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	2230      	movs	r2, #48	; 0x30
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fe34 	bl	8002704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <SystemClock_Config+0xcc>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a27      	ldr	r2, [pc, #156]	; (8000b54 <SystemClock_Config+0xcc>)
 8000ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <SystemClock_Config+0xcc>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad4:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	2310      	movs	r3, #16
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000afc:	2308      	movs	r3, #8
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b00:	2348      	movs	r3, #72	; 0x48
 8000b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fcc1 	bl	8001498 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b1c:	f000 f88c 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 ff23 	bl	8001988 <HAL_RCC_ClockConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b48:	f000 f876 	bl	8000c38 <Error_Handler>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3750      	adds	r7, #80	; 0x50
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40007000 	.word	0x40007000

08000b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_USART1_UART_Init+0x50>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_USART1_UART_Init+0x4c>)
 8000b94:	f001 f918 	bl	8001dc8 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b9e:	f000 f84b 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000178 	.word	0x20000178
 8000bac:	40011000 	.word	0x40011000

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_GPIO_Init+0x80>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <MX_GPIO_Init+0x80>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_GPIO_Init+0x80>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_GPIO_Init+0x80>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <MX_GPIO_Init+0x80>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_GPIO_Init+0x80>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <MX_GPIO_Init+0x84>)
 8000c06:	f000 fc2d 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c0a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_GPIO_Init+0x84>)
 8000c24:	f000 fa72 	bl	800110c <HAL_GPIO_Init>

}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40021800 	.word	0x40021800

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_UART_MspInit+0x84>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d12c      	bne.n	8000d10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d00:	2307      	movs	r3, #7
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_UART_MspInit+0x8c>)
 8000d0c:	f000 f9fe 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f8c6 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f001 fc7a 	bl	80026a0 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20030000 	.word	0x20030000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	200001bc 	.word	0x200001bc
 8000de0:	200001d8 	.word	0x200001d8

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0e:	490e      	ldr	r1, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e24:	4c0b      	ldr	r4, [pc, #44]	; (8000e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e32:	f7ff ffd7 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e36:	f001 fc39 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3a:	f7ff fe11 	bl	8000a60 <main>
  bx  lr    
 8000e3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e4c:	08002a94 	.word	0x08002a94
  ldr r2, =_sbss
 8000e50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e54:	200001d4 	.word	0x200001d4

08000e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <HAL_Init+0x40>)
 8000e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_Init+0x40>)
 8000e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_Init+0x40>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f90d 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fed8 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023c00 	.word	0x40023c00

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f917 	bl	80010f2 <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f8ed 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	200001c0 	.word	0x200001c0

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200001c0 	.word	0x200001c0

08000f40 <__NVIC_SetPriorityGrouping>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_SetPriority>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff47 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5c 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb0 	bl	8001060 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e177      	b.n	8001418 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8166 	bne.w	8001412 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d005      	beq.n	800115e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	2b02      	cmp	r3, #2
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d017      	beq.n	80011fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d123      	bne.n	8001250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80c0 	beq.w	8001412 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_GPIO_Init+0x324>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a65      	ldr	r2, [pc, #404]	; (8001430 <HAL_GPIO_Init+0x324>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b63      	ldr	r3, [pc, #396]	; (8001430 <HAL_GPIO_Init+0x324>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ae:	4a61      	ldr	r2, [pc, #388]	; (8001434 <HAL_GPIO_Init+0x328>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a58      	ldr	r2, [pc, #352]	; (8001438 <HAL_GPIO_Init+0x32c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d037      	beq.n	800134a <HAL_GPIO_Init+0x23e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a57      	ldr	r2, [pc, #348]	; (800143c <HAL_GPIO_Init+0x330>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d031      	beq.n	8001346 <HAL_GPIO_Init+0x23a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a56      	ldr	r2, [pc, #344]	; (8001440 <HAL_GPIO_Init+0x334>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d02b      	beq.n	8001342 <HAL_GPIO_Init+0x236>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a55      	ldr	r2, [pc, #340]	; (8001444 <HAL_GPIO_Init+0x338>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d025      	beq.n	800133e <HAL_GPIO_Init+0x232>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a54      	ldr	r2, [pc, #336]	; (8001448 <HAL_GPIO_Init+0x33c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01f      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_GPIO_Init+0x340>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x22a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_GPIO_Init+0x344>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a51      	ldr	r2, [pc, #324]	; (8001454 <HAL_GPIO_Init+0x348>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x222>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_GPIO_Init+0x34c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_GPIO_Init+0x350>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x21a>
 8001322:	2309      	movs	r3, #9
 8001324:	e012      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001326:	230a      	movs	r3, #10
 8001328:	e010      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132a:	2308      	movs	r3, #8
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132e:	2307      	movs	r3, #7
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x240>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	; (8001434 <HAL_GPIO_Init+0x328>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_GPIO_Init+0x354>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a34      	ldr	r2, [pc, #208]	; (8001460 <HAL_GPIO_Init+0x354>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <HAL_GPIO_Init+0x354>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a29      	ldr	r2, [pc, #164]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_GPIO_Init+0x354>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae84 	bls.w	8001128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40022000 	.word	0x40022000
 800145c:	40022400 	.word	0x40022400
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001480:	e003      	b.n	800148a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e267      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d075      	beq.n	80015a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014b6:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d00c      	beq.n	80014dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c2:	4b85      	ldr	r3, [pc, #532]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d112      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ce:	4b82      	ldr	r3, [pc, #520]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014da:	d10b      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	4b7e      	ldr	r3, [pc, #504]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d05b      	beq.n	80015a0 <HAL_RCC_OscConfig+0x108>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d157      	bne.n	80015a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e242      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fc:	d106      	bne.n	800150c <HAL_RCC_OscConfig+0x74>
 80014fe:	4b76      	ldr	r3, [pc, #472]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a75      	ldr	r2, [pc, #468]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e01d      	b.n	8001548 <HAL_RCC_OscConfig+0xb0>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x98>
 8001516:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6f      	ldr	r2, [pc, #444]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6c      	ldr	r2, [pc, #432]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0xb0>
 8001530:	4b69      	ldr	r3, [pc, #420]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a68      	ldr	r2, [pc, #416]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a65      	ldr	r2, [pc, #404]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d013      	beq.n	8001578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fcea 	bl	8000f28 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fce6 	bl	8000f28 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e207      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	4b5b      	ldr	r3, [pc, #364]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0xc0>
 8001576:	e014      	b.n	80015a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fcd6 	bl	8000f28 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fcd2 	bl	8000f28 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1f3      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	4b51      	ldr	r3, [pc, #324]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0xe8>
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d063      	beq.n	8001676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ae:	4b4a      	ldr	r3, [pc, #296]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d11c      	bne.n	8001600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c6:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d116      	bne.n	8001600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_OscConfig+0x152>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e1c7      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ea:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4937      	ldr	r1, [pc, #220]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	e03a      	b.n	8001676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_RCC_OscConfig+0x244>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff fc8b 	bl	8000f28 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fc87 	bl	8000f28 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1a8      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4925      	ldr	r1, [pc, #148]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
 8001648:	e015      	b.n	8001676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_RCC_OscConfig+0x244>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fc6a 	bl	8000f28 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff fc66 	bl	8000f28 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e187      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d036      	beq.n	80016f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d016      	beq.n	80016b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_RCC_OscConfig+0x248>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff fc4a 	bl	8000f28 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff fc46 	bl	8000f28 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e167      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_OscConfig+0x240>)
 80016ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x200>
 80016b6:	e01b      	b.n	80016f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_RCC_OscConfig+0x248>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff fc33 	bl	8000f28 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	e00e      	b.n	80016e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff fc2f 	bl	8000f28 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d907      	bls.n	80016e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e150      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
 80016d8:	40023800 	.word	0x40023800
 80016dc:	42470000 	.word	0x42470000
 80016e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	4b88      	ldr	r3, [pc, #544]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 80016e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ea      	bne.n	80016c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8097 	beq.w	800182c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001702:	4b81      	ldr	r3, [pc, #516]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b7d      	ldr	r3, [pc, #500]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a7c      	ldr	r2, [pc, #496]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b7a      	ldr	r3, [pc, #488]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b77      	ldr	r3, [pc, #476]	; (800190c <HAL_RCC_OscConfig+0x474>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173a:	4b74      	ldr	r3, [pc, #464]	; (800190c <HAL_RCC_OscConfig+0x474>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a73      	ldr	r2, [pc, #460]	; (800190c <HAL_RCC_OscConfig+0x474>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fbef 	bl	8000f28 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174e:	f7ff fbeb 	bl	8000f28 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e10c      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	4b6a      	ldr	r3, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x474>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x2ea>
 8001774:	4b64      	ldr	r3, [pc, #400]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	4a63      	ldr	r2, [pc, #396]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
 8001780:	e01c      	b.n	80017bc <HAL_RCC_OscConfig+0x324>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b05      	cmp	r3, #5
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x30c>
 800178a:	4b5f      	ldr	r3, [pc, #380]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a5e      	ldr	r2, [pc, #376]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
 8001796:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a5b      	ldr	r2, [pc, #364]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0x324>
 80017a4:	4b58      	ldr	r3, [pc, #352]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	4a57      	ldr	r2, [pc, #348]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6713      	str	r3, [r2, #112]	; 0x70
 80017b0:	4b55      	ldr	r3, [pc, #340]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	4a54      	ldr	r2, [pc, #336]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 0304 	bic.w	r3, r3, #4
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d015      	beq.n	80017f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fbb0 	bl	8000f28 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff fbac 	bl	8000f28 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0cb      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e2:	4b49      	ldr	r3, [pc, #292]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0ee      	beq.n	80017cc <HAL_RCC_OscConfig+0x334>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff fb9a 	bl	8000f28 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f6:	e00a      	b.n	800180e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff fb96 	bl	8000f28 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0b5      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180e:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1ee      	bne.n	80017f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001820:	4b39      	ldr	r3, [pc, #228]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	4a38      	ldr	r2, [pc, #224]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80a1 	beq.w	8001978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b08      	cmp	r3, #8
 8001840:	d05c      	beq.n	80018fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d141      	bne.n	80018ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <HAL_RCC_OscConfig+0x478>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fb6a 	bl	8000f28 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fb66 	bl	8000f28 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e087      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	085b      	lsrs	r3, r3, #1
 800188e:	3b01      	subs	r3, #1
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	061b      	lsls	r3, r3, #24
 800189a:	491b      	ldr	r1, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x478>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff fb3f 	bl	8000f28 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff fb3b 	bl	8000f28 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e05c      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x416>
 80018cc:	e054      	b.n	8001978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_RCC_OscConfig+0x478>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fb28 	bl	8000f28 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff fb24 	bl	8000f28 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e045      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_RCC_OscConfig+0x470>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x444>
 80018fa:	e03d      	b.n	8001978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e038      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000
 8001910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x4ec>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d028      	beq.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d121      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d11a      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800194a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194c:	4293      	cmp	r3, r2
 800194e:	d111      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0cc      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b68      	ldr	r3, [pc, #416]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d90c      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b8      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019dc:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	494d      	ldr	r1, [pc, #308]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d044      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d119      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e07f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a46:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e06f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e067      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 0203 	bic.w	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4934      	ldr	r1, [pc, #208]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a78:	f7ff fa56 	bl	8000f28 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7ff fa52 	bl	8000f28 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e04f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 020c 	and.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1eb      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d20c      	bcs.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e032      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4916      	ldr	r1, [pc, #88]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	490e      	ldr	r1, [pc, #56]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b0e:	f000 f821 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	490a      	ldr	r1, [pc, #40]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	5ccb      	ldrb	r3, [r1, r3]
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f9b6 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08002a6c 	.word	0x08002a6c
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b58:	b094      	sub	sp, #80	; 0x50
 8001b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b60:	2300      	movs	r3, #0
 8001b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b64:	2300      	movs	r3, #0
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6c:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d00d      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x40>
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	f200 80e1 	bhi.w	8001d40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x34>
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b86:	e0db      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b73      	ldr	r3, [pc, #460]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b8c:	e0db      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b8e:	4b73      	ldr	r3, [pc, #460]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001b90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b92:	e0d8      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b94:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d063      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	462b      	mov	r3, r5
 8001bca:	f04f 0000 	mov.w	r0, #0
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	0159      	lsls	r1, r3, #5
 8001bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd8:	0150      	lsls	r0, r2, #5
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4621      	mov	r1, r4
 8001be0:	1a51      	subs	r1, r2, r1
 8001be2:	6139      	str	r1, [r7, #16]
 8001be4:	4629      	mov	r1, r5
 8001be6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bf8:	4659      	mov	r1, fp
 8001bfa:	018b      	lsls	r3, r1, #6
 8001bfc:	4651      	mov	r1, sl
 8001bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c02:	4651      	mov	r1, sl
 8001c04:	018a      	lsls	r2, r1, #6
 8001c06:	4651      	mov	r1, sl
 8001c08:	ebb2 0801 	subs.w	r8, r2, r1
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c26:	4690      	mov	r8, r2
 8001c28:	4699      	mov	r9, r3
 8001c2a:	4623      	mov	r3, r4
 8001c2c:	eb18 0303 	adds.w	r3, r8, r3
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	462b      	mov	r3, r5
 8001c34:	eb49 0303 	adc.w	r3, r9, r3
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c46:	4629      	mov	r1, r5
 8001c48:	024b      	lsls	r3, r1, #9
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c50:	4621      	mov	r1, r4
 8001c52:	024a      	lsls	r2, r1, #9
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c64:	f7fe fad4 	bl	8000210 <__aeabi_uldivmod>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c70:	e058      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c82:	623b      	str	r3, [r7, #32]
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c8c:	4642      	mov	r2, r8
 8001c8e:	464b      	mov	r3, r9
 8001c90:	f04f 0000 	mov.w	r0, #0
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	0159      	lsls	r1, r3, #5
 8001c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c9e:	0150      	lsls	r0, r2, #5
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4641      	mov	r1, r8
 8001ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001caa:	4649      	mov	r1, r9
 8001cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8001cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	00eb      	lsls	r3, r5, #3
 8001cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cda:	00e2      	lsls	r2, r4, #3
 8001cdc:	4614      	mov	r4, r2
 8001cde:	461d      	mov	r5, r3
 8001ce0:	4643      	mov	r3, r8
 8001ce2:	18e3      	adds	r3, r4, r3
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	464b      	mov	r3, r9
 8001ce8:	eb45 0303 	adc.w	r3, r5, r3
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	028b      	lsls	r3, r1, #10
 8001cfe:	4621      	mov	r1, r4
 8001d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d04:	4621      	mov	r1, r4
 8001d06:	028a      	lsls	r2, r1, #10
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	61fa      	str	r2, [r7, #28]
 8001d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d18:	f7fe fa7a 	bl	8000210 <__aeabi_uldivmod>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4613      	mov	r3, r2
 8001d22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d3e:	e002      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3750      	adds	r7, #80	; 0x50
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	007a1200 	.word	0x007a1200

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a9b      	lsrs	r3, r3, #10
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08002a7c 	.word	0x08002a7c

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffdc 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0b5b      	lsrs	r3, r3, #13
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08002a7c 	.word	0x08002a7c

08001dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e03f      	b.n	8001e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe ff50 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2224      	movs	r2, #36	; 0x24
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f9cb 	bl	80021a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08a      	sub	sp, #40	; 0x28
 8001e66:	af02      	add	r7, sp, #8
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d17c      	bne.n	8001f7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_UART_Transmit+0x2c>
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e075      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_UART_Transmit+0x3e>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e06e      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2221      	movs	r2, #33	; 0x21
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eb6:	f7ff f837 	bl	8000f28 <HAL_GetTick>
 8001eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	d108      	bne.n	8001ee4 <HAL_UART_Transmit+0x82>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	e003      	b.n	8001eec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ef4:	e02a      	b.n	8001f4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f8e2 	bl	80020ca <UART_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e036      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10b      	bne.n	8001f2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	e007      	b.n	8001f3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1cf      	bne.n	8001ef6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 f8b2 	bl	80020ca <UART_WaitOnFlagUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e006      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e000      	b.n	8001f7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f7c:	2302      	movs	r3, #2
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b08a      	sub	sp, #40	; 0x28
 8001f8a:	af02      	add	r7, sp, #8
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	f040 808c 	bne.w	80020c0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_UART_Receive+0x2e>
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e084      	b.n	80020c2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Receive+0x40>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e07d      	b.n	80020c2 <HAL_UART_Receive+0x13c>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2222      	movs	r2, #34	; 0x22
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fe2:	f7fe ffa1 	bl	8000f28 <HAL_GetTick>
 8001fe6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	88fa      	ldrh	r2, [r7, #6]
 8001fec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	88fa      	ldrh	r2, [r7, #6]
 8001ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ffc:	d108      	bne.n	8002010 <HAL_UART_Receive+0x8a>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d104      	bne.n	8002010 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	e003      	b.n	8002018 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002020:	e043      	b.n	80020aa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2200      	movs	r2, #0
 800202a:	2120      	movs	r1, #32
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f84c 	bl	80020ca <UART_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e042      	b.n	80020c2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	b29b      	uxth	r3, r3
 800204a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800204e:	b29a      	uxth	r2, r3
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	3302      	adds	r3, #2
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	e01f      	b.n	800209c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002064:	d007      	beq.n	8002076 <HAL_UART_Receive+0xf0>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10a      	bne.n	8002084 <HAL_UART_Receive+0xfe>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e008      	b.n	8002096 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002090:	b2da      	uxtb	r2, r3
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3301      	adds	r3, #1
 800209a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1b6      	bne.n	8002022 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	e000      	b.n	80020c2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80020c0:	2302      	movs	r3, #2
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b090      	sub	sp, #64	; 0x40
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4613      	mov	r3, r2
 80020d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020da:	e050      	b.n	800217e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e2:	d04c      	beq.n	800217e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <UART_WaitOnFlagUntilTimeout+0x30>
 80020ea:	f7fe ff1d 	bl	8000f28 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d241      	bcs.n	800217e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	330c      	adds	r3, #12
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	e853 3f00 	ldrex	r3, [r3]
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	330c      	adds	r3, #12
 8002118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800211a:	637a      	str	r2, [r7, #52]	; 0x34
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002122:	e841 2300 	strex	r3, r2, [r1]
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e5      	bne.n	80020fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3314      	adds	r3, #20
 8002134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	e853 3f00 	ldrex	r3, [r3]
 800213c:	613b      	str	r3, [r7, #16]
   return(result);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3314      	adds	r3, #20
 800214c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800214e:	623a      	str	r2, [r7, #32]
 8002150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002152:	69f9      	ldr	r1, [r7, #28]
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	e841 2300 	strex	r3, r2, [r1]
 800215a:	61bb      	str	r3, [r7, #24]
   return(result);
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1e5      	bne.n	800212e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e00f      	b.n	800219e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4013      	ands	r3, r2
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	429a      	cmp	r2, r3
 800219a:	d09f      	beq.n	80020dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3740      	adds	r7, #64	; 0x40
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ac:	b0c0      	sub	sp, #256	; 0x100
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c4:	68d9      	ldr	r1, [r3, #12]
 80021c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	ea40 0301 	orr.w	r3, r0, r1
 80021d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	431a      	orrs	r2, r3
 80021e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002200:	f021 010c 	bic.w	r1, r1, #12
 8002204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800220e:	430b      	orrs	r3, r1
 8002210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800221e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002222:	6999      	ldr	r1, [r3, #24]
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	ea40 0301 	orr.w	r3, r0, r1
 800222e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <UART_SetConfig+0x2cc>)
 8002238:	429a      	cmp	r2, r3
 800223a:	d005      	beq.n	8002248 <UART_SetConfig+0xa0>
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b8d      	ldr	r3, [pc, #564]	; (8002478 <UART_SetConfig+0x2d0>)
 8002244:	429a      	cmp	r2, r3
 8002246:	d104      	bne.n	8002252 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002248:	f7ff fdaa 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 800224c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002250:	e003      	b.n	800225a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002252:	f7ff fd91 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002256:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800225a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002264:	f040 810c 	bne.w	8002480 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800226c:	2200      	movs	r2, #0
 800226e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002272:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002276:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800227a:	4622      	mov	r2, r4
 800227c:	462b      	mov	r3, r5
 800227e:	1891      	adds	r1, r2, r2
 8002280:	65b9      	str	r1, [r7, #88]	; 0x58
 8002282:	415b      	adcs	r3, r3
 8002284:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002286:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800228a:	4621      	mov	r1, r4
 800228c:	eb12 0801 	adds.w	r8, r2, r1
 8002290:	4629      	mov	r1, r5
 8002292:	eb43 0901 	adc.w	r9, r3, r1
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022aa:	4690      	mov	r8, r2
 80022ac:	4699      	mov	r9, r3
 80022ae:	4623      	mov	r3, r4
 80022b0:	eb18 0303 	adds.w	r3, r8, r3
 80022b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022b8:	462b      	mov	r3, r5
 80022ba:	eb49 0303 	adc.w	r3, r9, r3
 80022be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80022ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80022d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80022d6:	460b      	mov	r3, r1
 80022d8:	18db      	adds	r3, r3, r3
 80022da:	653b      	str	r3, [r7, #80]	; 0x50
 80022dc:	4613      	mov	r3, r2
 80022de:	eb42 0303 	adc.w	r3, r2, r3
 80022e2:	657b      	str	r3, [r7, #84]	; 0x54
 80022e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80022ec:	f7fd ff90 	bl	8000210 <__aeabi_uldivmod>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4b61      	ldr	r3, [pc, #388]	; (800247c <UART_SetConfig+0x2d4>)
 80022f6:	fba3 2302 	umull	r2, r3, r3, r2
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	011c      	lsls	r4, r3, #4
 80022fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002302:	2200      	movs	r2, #0
 8002304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002308:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800230c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002310:	4642      	mov	r2, r8
 8002312:	464b      	mov	r3, r9
 8002314:	1891      	adds	r1, r2, r2
 8002316:	64b9      	str	r1, [r7, #72]	; 0x48
 8002318:	415b      	adcs	r3, r3
 800231a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800231c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002320:	4641      	mov	r1, r8
 8002322:	eb12 0a01 	adds.w	sl, r2, r1
 8002326:	4649      	mov	r1, r9
 8002328:	eb43 0b01 	adc.w	fp, r3, r1
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002338:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800233c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002340:	4692      	mov	sl, r2
 8002342:	469b      	mov	fp, r3
 8002344:	4643      	mov	r3, r8
 8002346:	eb1a 0303 	adds.w	r3, sl, r3
 800234a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800234e:	464b      	mov	r3, r9
 8002350:	eb4b 0303 	adc.w	r3, fp, r3
 8002354:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002364:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002368:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800236c:	460b      	mov	r3, r1
 800236e:	18db      	adds	r3, r3, r3
 8002370:	643b      	str	r3, [r7, #64]	; 0x40
 8002372:	4613      	mov	r3, r2
 8002374:	eb42 0303 	adc.w	r3, r2, r3
 8002378:	647b      	str	r3, [r7, #68]	; 0x44
 800237a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800237e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002382:	f7fd ff45 	bl	8000210 <__aeabi_uldivmod>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4611      	mov	r1, r2
 800238c:	4b3b      	ldr	r3, [pc, #236]	; (800247c <UART_SetConfig+0x2d4>)
 800238e:	fba3 2301 	umull	r2, r3, r3, r1
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2264      	movs	r2, #100	; 0x64
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	1acb      	subs	r3, r1, r3
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <UART_SetConfig+0x2d4>)
 80023a4:	fba3 2302 	umull	r2, r3, r3, r2
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023b0:	441c      	add	r4, r3
 80023b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023b6:	2200      	movs	r2, #0
 80023b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80023c4:	4642      	mov	r2, r8
 80023c6:	464b      	mov	r3, r9
 80023c8:	1891      	adds	r1, r2, r2
 80023ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80023cc:	415b      	adcs	r3, r3
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023d4:	4641      	mov	r1, r8
 80023d6:	1851      	adds	r1, r2, r1
 80023d8:	6339      	str	r1, [r7, #48]	; 0x30
 80023da:	4649      	mov	r1, r9
 80023dc:	414b      	adcs	r3, r1
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80023ec:	4659      	mov	r1, fp
 80023ee:	00cb      	lsls	r3, r1, #3
 80023f0:	4651      	mov	r1, sl
 80023f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023f6:	4651      	mov	r1, sl
 80023f8:	00ca      	lsls	r2, r1, #3
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	4603      	mov	r3, r0
 8002400:	4642      	mov	r2, r8
 8002402:	189b      	adds	r3, r3, r2
 8002404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002408:	464b      	mov	r3, r9
 800240a:	460a      	mov	r2, r1
 800240c:	eb42 0303 	adc.w	r3, r2, r3
 8002410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002420:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002424:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002428:	460b      	mov	r3, r1
 800242a:	18db      	adds	r3, r3, r3
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
 800242e:	4613      	mov	r3, r2
 8002430:	eb42 0303 	adc.w	r3, r2, r3
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800243a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800243e:	f7fd fee7 	bl	8000210 <__aeabi_uldivmod>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <UART_SetConfig+0x2d4>)
 8002448:	fba3 1302 	umull	r1, r3, r3, r2
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	2164      	movs	r1, #100	; 0x64
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	3332      	adds	r3, #50	; 0x32
 800245a:	4a08      	ldr	r2, [pc, #32]	; (800247c <UART_SetConfig+0x2d4>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	f003 0207 	and.w	r2, r3, #7
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4422      	add	r2, r4
 800246e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002470:	e105      	b.n	800267e <UART_SetConfig+0x4d6>
 8002472:	bf00      	nop
 8002474:	40011000 	.word	0x40011000
 8002478:	40011400 	.word	0x40011400
 800247c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002484:	2200      	movs	r2, #0
 8002486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800248a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800248e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002492:	4642      	mov	r2, r8
 8002494:	464b      	mov	r3, r9
 8002496:	1891      	adds	r1, r2, r2
 8002498:	6239      	str	r1, [r7, #32]
 800249a:	415b      	adcs	r3, r3
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
 800249e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024a2:	4641      	mov	r1, r8
 80024a4:	1854      	adds	r4, r2, r1
 80024a6:	4649      	mov	r1, r9
 80024a8:	eb43 0501 	adc.w	r5, r3, r1
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	00eb      	lsls	r3, r5, #3
 80024b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ba:	00e2      	lsls	r2, r4, #3
 80024bc:	4614      	mov	r4, r2
 80024be:	461d      	mov	r5, r3
 80024c0:	4643      	mov	r3, r8
 80024c2:	18e3      	adds	r3, r4, r3
 80024c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024c8:	464b      	mov	r3, r9
 80024ca:	eb45 0303 	adc.w	r3, r5, r3
 80024ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024ee:	4629      	mov	r1, r5
 80024f0:	008b      	lsls	r3, r1, #2
 80024f2:	4621      	mov	r1, r4
 80024f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024f8:	4621      	mov	r1, r4
 80024fa:	008a      	lsls	r2, r1, #2
 80024fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002500:	f7fd fe86 	bl	8000210 <__aeabi_uldivmod>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4b60      	ldr	r3, [pc, #384]	; (800268c <UART_SetConfig+0x4e4>)
 800250a:	fba3 2302 	umull	r2, r3, r3, r2
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	011c      	lsls	r4, r3, #4
 8002512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800251c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002520:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002524:	4642      	mov	r2, r8
 8002526:	464b      	mov	r3, r9
 8002528:	1891      	adds	r1, r2, r2
 800252a:	61b9      	str	r1, [r7, #24]
 800252c:	415b      	adcs	r3, r3
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002534:	4641      	mov	r1, r8
 8002536:	1851      	adds	r1, r2, r1
 8002538:	6139      	str	r1, [r7, #16]
 800253a:	4649      	mov	r1, r9
 800253c:	414b      	adcs	r3, r1
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800254c:	4659      	mov	r1, fp
 800254e:	00cb      	lsls	r3, r1, #3
 8002550:	4651      	mov	r1, sl
 8002552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002556:	4651      	mov	r1, sl
 8002558:	00ca      	lsls	r2, r1, #3
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	4603      	mov	r3, r0
 8002560:	4642      	mov	r2, r8
 8002562:	189b      	adds	r3, r3, r2
 8002564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002568:	464b      	mov	r3, r9
 800256a:	460a      	mov	r2, r1
 800256c:	eb42 0303 	adc.w	r3, r2, r3
 8002570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	67bb      	str	r3, [r7, #120]	; 0x78
 800257e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800258c:	4649      	mov	r1, r9
 800258e:	008b      	lsls	r3, r1, #2
 8002590:	4641      	mov	r1, r8
 8002592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002596:	4641      	mov	r1, r8
 8002598:	008a      	lsls	r2, r1, #2
 800259a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800259e:	f7fd fe37 	bl	8000210 <__aeabi_uldivmod>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <UART_SetConfig+0x4e4>)
 80025a8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	2164      	movs	r1, #100	; 0x64
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	3332      	adds	r3, #50	; 0x32
 80025ba:	4a34      	ldr	r2, [pc, #208]	; (800268c <UART_SetConfig+0x4e4>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c6:	441c      	add	r4, r3
 80025c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025cc:	2200      	movs	r2, #0
 80025ce:	673b      	str	r3, [r7, #112]	; 0x70
 80025d0:	677a      	str	r2, [r7, #116]	; 0x74
 80025d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80025d6:	4642      	mov	r2, r8
 80025d8:	464b      	mov	r3, r9
 80025da:	1891      	adds	r1, r2, r2
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	415b      	adcs	r3, r3
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025e6:	4641      	mov	r1, r8
 80025e8:	1851      	adds	r1, r2, r1
 80025ea:	6039      	str	r1, [r7, #0]
 80025ec:	4649      	mov	r1, r9
 80025ee:	414b      	adcs	r3, r1
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025fe:	4659      	mov	r1, fp
 8002600:	00cb      	lsls	r3, r1, #3
 8002602:	4651      	mov	r1, sl
 8002604:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002608:	4651      	mov	r1, sl
 800260a:	00ca      	lsls	r2, r1, #3
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	4603      	mov	r3, r0
 8002612:	4642      	mov	r2, r8
 8002614:	189b      	adds	r3, r3, r2
 8002616:	66bb      	str	r3, [r7, #104]	; 0x68
 8002618:	464b      	mov	r3, r9
 800261a:	460a      	mov	r2, r1
 800261c:	eb42 0303 	adc.w	r3, r2, r3
 8002620:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	663b      	str	r3, [r7, #96]	; 0x60
 800262c:	667a      	str	r2, [r7, #100]	; 0x64
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800263a:	4649      	mov	r1, r9
 800263c:	008b      	lsls	r3, r1, #2
 800263e:	4641      	mov	r1, r8
 8002640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002644:	4641      	mov	r1, r8
 8002646:	008a      	lsls	r2, r1, #2
 8002648:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800264c:	f7fd fde0 	bl	8000210 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <UART_SetConfig+0x4e4>)
 8002656:	fba3 1302 	umull	r1, r3, r3, r2
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2164      	movs	r1, #100	; 0x64
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	3332      	adds	r3, #50	; 0x32
 8002668:	4a08      	ldr	r2, [pc, #32]	; (800268c <UART_SetConfig+0x4e4>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	f003 020f 	and.w	r2, r3, #15
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4422      	add	r2, r4
 800267c:	609a      	str	r2, [r3, #8]
}
 800267e:	bf00      	nop
 8002680:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002684:	46bd      	mov	sp, r7
 8002686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268a:	bf00      	nop
 800268c:	51eb851f 	.word	0x51eb851f

08002690 <calloc>:
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <calloc+0xc>)
 8002692:	460a      	mov	r2, r1
 8002694:	4601      	mov	r1, r0
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f000 b83c 	b.w	8002714 <_calloc_r>
 800269c:	2000000c 	.word	0x2000000c

080026a0 <__errno>:
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <__errno+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	2000000c 	.word	0x2000000c

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	4d0d      	ldr	r5, [pc, #52]	; (80026e4 <__libc_init_array+0x38>)
 80026b0:	4c0d      	ldr	r4, [pc, #52]	; (80026e8 <__libc_init_array+0x3c>)
 80026b2:	1b64      	subs	r4, r4, r5
 80026b4:	10a4      	asrs	r4, r4, #2
 80026b6:	2600      	movs	r6, #0
 80026b8:	42a6      	cmp	r6, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	4d0b      	ldr	r5, [pc, #44]	; (80026ec <__libc_init_array+0x40>)
 80026be:	4c0c      	ldr	r4, [pc, #48]	; (80026f0 <__libc_init_array+0x44>)
 80026c0:	f000 f944 	bl	800294c <_init>
 80026c4:	1b64      	subs	r4, r4, r5
 80026c6:	10a4      	asrs	r4, r4, #2
 80026c8:	2600      	movs	r6, #0
 80026ca:	42a6      	cmp	r6, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d4:	4798      	blx	r3
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	f855 3b04 	ldr.w	r3, [r5], #4
 80026de:	4798      	blx	r3
 80026e0:	3601      	adds	r6, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	08002a8c 	.word	0x08002a8c
 80026e8:	08002a8c 	.word	0x08002a8c
 80026ec:	08002a8c 	.word	0x08002a8c
 80026f0:	08002a90 	.word	0x08002a90

080026f4 <free>:
 80026f4:	4b02      	ldr	r3, [pc, #8]	; (8002700 <free+0xc>)
 80026f6:	4601      	mov	r1, r0
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	f000 b821 	b.w	8002740 <_free_r>
 80026fe:	bf00      	nop
 8002700:	2000000c 	.word	0x2000000c

08002704 <memset>:
 8002704:	4402      	add	r2, r0
 8002706:	4603      	mov	r3, r0
 8002708:	4293      	cmp	r3, r2
 800270a:	d100      	bne.n	800270e <memset+0xa>
 800270c:	4770      	bx	lr
 800270e:	f803 1b01 	strb.w	r1, [r3], #1
 8002712:	e7f9      	b.n	8002708 <memset+0x4>

08002714 <_calloc_r>:
 8002714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002716:	fba1 2402 	umull	r2, r4, r1, r2
 800271a:	b94c      	cbnz	r4, 8002730 <_calloc_r+0x1c>
 800271c:	4611      	mov	r1, r2
 800271e:	9201      	str	r2, [sp, #4]
 8002720:	f000 f87a 	bl	8002818 <_malloc_r>
 8002724:	9a01      	ldr	r2, [sp, #4]
 8002726:	4605      	mov	r5, r0
 8002728:	b930      	cbnz	r0, 8002738 <_calloc_r+0x24>
 800272a:	4628      	mov	r0, r5
 800272c:	b003      	add	sp, #12
 800272e:	bd30      	pop	{r4, r5, pc}
 8002730:	220c      	movs	r2, #12
 8002732:	6002      	str	r2, [r0, #0]
 8002734:	2500      	movs	r5, #0
 8002736:	e7f8      	b.n	800272a <_calloc_r+0x16>
 8002738:	4621      	mov	r1, r4
 800273a:	f7ff ffe3 	bl	8002704 <memset>
 800273e:	e7f4      	b.n	800272a <_calloc_r+0x16>

08002740 <_free_r>:
 8002740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002742:	2900      	cmp	r1, #0
 8002744:	d044      	beq.n	80027d0 <_free_r+0x90>
 8002746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800274a:	9001      	str	r0, [sp, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f1a1 0404 	sub.w	r4, r1, #4
 8002752:	bfb8      	it	lt
 8002754:	18e4      	addlt	r4, r4, r3
 8002756:	f000 f8eb 	bl	8002930 <__malloc_lock>
 800275a:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <_free_r+0x94>)
 800275c:	9801      	ldr	r0, [sp, #4]
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	b933      	cbnz	r3, 8002770 <_free_r+0x30>
 8002762:	6063      	str	r3, [r4, #4]
 8002764:	6014      	str	r4, [r2, #0]
 8002766:	b003      	add	sp, #12
 8002768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800276c:	f000 b8e6 	b.w	800293c <__malloc_unlock>
 8002770:	42a3      	cmp	r3, r4
 8002772:	d908      	bls.n	8002786 <_free_r+0x46>
 8002774:	6825      	ldr	r5, [r4, #0]
 8002776:	1961      	adds	r1, r4, r5
 8002778:	428b      	cmp	r3, r1
 800277a:	bf01      	itttt	eq
 800277c:	6819      	ldreq	r1, [r3, #0]
 800277e:	685b      	ldreq	r3, [r3, #4]
 8002780:	1949      	addeq	r1, r1, r5
 8002782:	6021      	streq	r1, [r4, #0]
 8002784:	e7ed      	b.n	8002762 <_free_r+0x22>
 8002786:	461a      	mov	r2, r3
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	b10b      	cbz	r3, 8002790 <_free_r+0x50>
 800278c:	42a3      	cmp	r3, r4
 800278e:	d9fa      	bls.n	8002786 <_free_r+0x46>
 8002790:	6811      	ldr	r1, [r2, #0]
 8002792:	1855      	adds	r5, r2, r1
 8002794:	42a5      	cmp	r5, r4
 8002796:	d10b      	bne.n	80027b0 <_free_r+0x70>
 8002798:	6824      	ldr	r4, [r4, #0]
 800279a:	4421      	add	r1, r4
 800279c:	1854      	adds	r4, r2, r1
 800279e:	42a3      	cmp	r3, r4
 80027a0:	6011      	str	r1, [r2, #0]
 80027a2:	d1e0      	bne.n	8002766 <_free_r+0x26>
 80027a4:	681c      	ldr	r4, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	6053      	str	r3, [r2, #4]
 80027aa:	4421      	add	r1, r4
 80027ac:	6011      	str	r1, [r2, #0]
 80027ae:	e7da      	b.n	8002766 <_free_r+0x26>
 80027b0:	d902      	bls.n	80027b8 <_free_r+0x78>
 80027b2:	230c      	movs	r3, #12
 80027b4:	6003      	str	r3, [r0, #0]
 80027b6:	e7d6      	b.n	8002766 <_free_r+0x26>
 80027b8:	6825      	ldr	r5, [r4, #0]
 80027ba:	1961      	adds	r1, r4, r5
 80027bc:	428b      	cmp	r3, r1
 80027be:	bf04      	itt	eq
 80027c0:	6819      	ldreq	r1, [r3, #0]
 80027c2:	685b      	ldreq	r3, [r3, #4]
 80027c4:	6063      	str	r3, [r4, #4]
 80027c6:	bf04      	itt	eq
 80027c8:	1949      	addeq	r1, r1, r5
 80027ca:	6021      	streq	r1, [r4, #0]
 80027cc:	6054      	str	r4, [r2, #4]
 80027ce:	e7ca      	b.n	8002766 <_free_r+0x26>
 80027d0:	b003      	add	sp, #12
 80027d2:	bd30      	pop	{r4, r5, pc}
 80027d4:	200001c4 	.word	0x200001c4

080027d8 <sbrk_aligned>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	4e0e      	ldr	r6, [pc, #56]	; (8002814 <sbrk_aligned+0x3c>)
 80027dc:	460c      	mov	r4, r1
 80027de:	6831      	ldr	r1, [r6, #0]
 80027e0:	4605      	mov	r5, r0
 80027e2:	b911      	cbnz	r1, 80027ea <sbrk_aligned+0x12>
 80027e4:	f000 f88c 	bl	8002900 <_sbrk_r>
 80027e8:	6030      	str	r0, [r6, #0]
 80027ea:	4621      	mov	r1, r4
 80027ec:	4628      	mov	r0, r5
 80027ee:	f000 f887 	bl	8002900 <_sbrk_r>
 80027f2:	1c43      	adds	r3, r0, #1
 80027f4:	d00a      	beq.n	800280c <sbrk_aligned+0x34>
 80027f6:	1cc4      	adds	r4, r0, #3
 80027f8:	f024 0403 	bic.w	r4, r4, #3
 80027fc:	42a0      	cmp	r0, r4
 80027fe:	d007      	beq.n	8002810 <sbrk_aligned+0x38>
 8002800:	1a21      	subs	r1, r4, r0
 8002802:	4628      	mov	r0, r5
 8002804:	f000 f87c 	bl	8002900 <_sbrk_r>
 8002808:	3001      	adds	r0, #1
 800280a:	d101      	bne.n	8002810 <sbrk_aligned+0x38>
 800280c:	f04f 34ff 	mov.w	r4, #4294967295
 8002810:	4620      	mov	r0, r4
 8002812:	bd70      	pop	{r4, r5, r6, pc}
 8002814:	200001c8 	.word	0x200001c8

08002818 <_malloc_r>:
 8002818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800281c:	1ccd      	adds	r5, r1, #3
 800281e:	f025 0503 	bic.w	r5, r5, #3
 8002822:	3508      	adds	r5, #8
 8002824:	2d0c      	cmp	r5, #12
 8002826:	bf38      	it	cc
 8002828:	250c      	movcc	r5, #12
 800282a:	2d00      	cmp	r5, #0
 800282c:	4607      	mov	r7, r0
 800282e:	db01      	blt.n	8002834 <_malloc_r+0x1c>
 8002830:	42a9      	cmp	r1, r5
 8002832:	d905      	bls.n	8002840 <_malloc_r+0x28>
 8002834:	230c      	movs	r3, #12
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	2600      	movs	r6, #0
 800283a:	4630      	mov	r0, r6
 800283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002840:	4e2e      	ldr	r6, [pc, #184]	; (80028fc <_malloc_r+0xe4>)
 8002842:	f000 f875 	bl	8002930 <__malloc_lock>
 8002846:	6833      	ldr	r3, [r6, #0]
 8002848:	461c      	mov	r4, r3
 800284a:	bb34      	cbnz	r4, 800289a <_malloc_r+0x82>
 800284c:	4629      	mov	r1, r5
 800284e:	4638      	mov	r0, r7
 8002850:	f7ff ffc2 	bl	80027d8 <sbrk_aligned>
 8002854:	1c43      	adds	r3, r0, #1
 8002856:	4604      	mov	r4, r0
 8002858:	d14d      	bne.n	80028f6 <_malloc_r+0xde>
 800285a:	6834      	ldr	r4, [r6, #0]
 800285c:	4626      	mov	r6, r4
 800285e:	2e00      	cmp	r6, #0
 8002860:	d140      	bne.n	80028e4 <_malloc_r+0xcc>
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	4631      	mov	r1, r6
 8002866:	4638      	mov	r0, r7
 8002868:	eb04 0803 	add.w	r8, r4, r3
 800286c:	f000 f848 	bl	8002900 <_sbrk_r>
 8002870:	4580      	cmp	r8, r0
 8002872:	d13a      	bne.n	80028ea <_malloc_r+0xd2>
 8002874:	6821      	ldr	r1, [r4, #0]
 8002876:	3503      	adds	r5, #3
 8002878:	1a6d      	subs	r5, r5, r1
 800287a:	f025 0503 	bic.w	r5, r5, #3
 800287e:	3508      	adds	r5, #8
 8002880:	2d0c      	cmp	r5, #12
 8002882:	bf38      	it	cc
 8002884:	250c      	movcc	r5, #12
 8002886:	4629      	mov	r1, r5
 8002888:	4638      	mov	r0, r7
 800288a:	f7ff ffa5 	bl	80027d8 <sbrk_aligned>
 800288e:	3001      	adds	r0, #1
 8002890:	d02b      	beq.n	80028ea <_malloc_r+0xd2>
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	442b      	add	r3, r5
 8002896:	6023      	str	r3, [r4, #0]
 8002898:	e00e      	b.n	80028b8 <_malloc_r+0xa0>
 800289a:	6822      	ldr	r2, [r4, #0]
 800289c:	1b52      	subs	r2, r2, r5
 800289e:	d41e      	bmi.n	80028de <_malloc_r+0xc6>
 80028a0:	2a0b      	cmp	r2, #11
 80028a2:	d916      	bls.n	80028d2 <_malloc_r+0xba>
 80028a4:	1961      	adds	r1, r4, r5
 80028a6:	42a3      	cmp	r3, r4
 80028a8:	6025      	str	r5, [r4, #0]
 80028aa:	bf18      	it	ne
 80028ac:	6059      	strne	r1, [r3, #4]
 80028ae:	6863      	ldr	r3, [r4, #4]
 80028b0:	bf08      	it	eq
 80028b2:	6031      	streq	r1, [r6, #0]
 80028b4:	5162      	str	r2, [r4, r5]
 80028b6:	604b      	str	r3, [r1, #4]
 80028b8:	4638      	mov	r0, r7
 80028ba:	f104 060b 	add.w	r6, r4, #11
 80028be:	f000 f83d 	bl	800293c <__malloc_unlock>
 80028c2:	f026 0607 	bic.w	r6, r6, #7
 80028c6:	1d23      	adds	r3, r4, #4
 80028c8:	1af2      	subs	r2, r6, r3
 80028ca:	d0b6      	beq.n	800283a <_malloc_r+0x22>
 80028cc:	1b9b      	subs	r3, r3, r6
 80028ce:	50a3      	str	r3, [r4, r2]
 80028d0:	e7b3      	b.n	800283a <_malloc_r+0x22>
 80028d2:	6862      	ldr	r2, [r4, #4]
 80028d4:	42a3      	cmp	r3, r4
 80028d6:	bf0c      	ite	eq
 80028d8:	6032      	streq	r2, [r6, #0]
 80028da:	605a      	strne	r2, [r3, #4]
 80028dc:	e7ec      	b.n	80028b8 <_malloc_r+0xa0>
 80028de:	4623      	mov	r3, r4
 80028e0:	6864      	ldr	r4, [r4, #4]
 80028e2:	e7b2      	b.n	800284a <_malloc_r+0x32>
 80028e4:	4634      	mov	r4, r6
 80028e6:	6876      	ldr	r6, [r6, #4]
 80028e8:	e7b9      	b.n	800285e <_malloc_r+0x46>
 80028ea:	230c      	movs	r3, #12
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4638      	mov	r0, r7
 80028f0:	f000 f824 	bl	800293c <__malloc_unlock>
 80028f4:	e7a1      	b.n	800283a <_malloc_r+0x22>
 80028f6:	6025      	str	r5, [r4, #0]
 80028f8:	e7de      	b.n	80028b8 <_malloc_r+0xa0>
 80028fa:	bf00      	nop
 80028fc:	200001c4 	.word	0x200001c4

08002900 <_sbrk_r>:
 8002900:	b538      	push	{r3, r4, r5, lr}
 8002902:	4d06      	ldr	r5, [pc, #24]	; (800291c <_sbrk_r+0x1c>)
 8002904:	2300      	movs	r3, #0
 8002906:	4604      	mov	r4, r0
 8002908:	4608      	mov	r0, r1
 800290a:	602b      	str	r3, [r5, #0]
 800290c:	f7fe fa34 	bl	8000d78 <_sbrk>
 8002910:	1c43      	adds	r3, r0, #1
 8002912:	d102      	bne.n	800291a <_sbrk_r+0x1a>
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	b103      	cbz	r3, 800291a <_sbrk_r+0x1a>
 8002918:	6023      	str	r3, [r4, #0]
 800291a:	bd38      	pop	{r3, r4, r5, pc}
 800291c:	200001cc 	.word	0x200001cc

08002920 <strcpy>:
 8002920:	4603      	mov	r3, r0
 8002922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002926:	f803 2b01 	strb.w	r2, [r3], #1
 800292a:	2a00      	cmp	r2, #0
 800292c:	d1f9      	bne.n	8002922 <strcpy+0x2>
 800292e:	4770      	bx	lr

08002930 <__malloc_lock>:
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <__malloc_lock+0x8>)
 8002932:	f000 b809 	b.w	8002948 <__retarget_lock_acquire_recursive>
 8002936:	bf00      	nop
 8002938:	200001d0 	.word	0x200001d0

0800293c <__malloc_unlock>:
 800293c:	4801      	ldr	r0, [pc, #4]	; (8002944 <__malloc_unlock+0x8>)
 800293e:	f000 b804 	b.w	800294a <__retarget_lock_release_recursive>
 8002942:	bf00      	nop
 8002944:	200001d0 	.word	0x200001d0

08002948 <__retarget_lock_acquire_recursive>:
 8002948:	4770      	bx	lr

0800294a <__retarget_lock_release_recursive>:
 800294a:	4770      	bx	lr

0800294c <_init>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr

08002958 <_fini>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr
